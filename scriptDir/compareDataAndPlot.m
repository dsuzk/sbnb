
% we tried to compare the results over many testcases
% we normalize the results of every testcase and choose data to plot
% then sum up the data over all testcases

% we had problems with having many not finished computations and replaced
% nan's with 2 * max the value in that column but of course this falsifies
% the plots 

% we left some old results from the two 'steiner' testcases where the plot
% looks nearly 'nice' ;)
% this is an comparison of strong branching with different values of alpha
% and pseudonodes and the computed nodes should decrease with increasing
% pseudonodes

dirStrong='FFF2_strong/data_st*'
files = dir(dirStrong);
strcat(files(1).folder,'/',files(1).name);
help=importfile(strcat(files(1).folder,'/',files(1).name));

lengthR=length(help(:,1))
lengthC=length(help(1,:))
lengthTC=length(files)

files = dir(dirStrong);
allData=zeros(lengthTC*lengthR,lengthC);

for i=1:length(files)
    file = files(i)
    data=importfile(strcat(file.folder,'/',file.name));
    data
    data=replacenan(data);
    
    data=sortrows(data,4);
    data=sortrows(data,3);
    
    data(:,6)=data(:,6)/(data(1,6));
    data(:,7)=data(:,7)/(data(1,7));
    data(:,8)=data(:,8)/(data(1,8));
    
    data
    
    allData((i-1)*lengthR+1:i*lengthR,1:lengthC)=data;
end


allData=sortrows(allData,4);
allData=sortrows(allData,3);

disp 'allData'
fprintf([repmat('%f\t', 1, size(allData, 2)) '\n'], allData')


plotData=zeros(lengthR,lengthC);

for i=1:lengthR
    plotData(i,:)=allData((i-1)*lengthTC+1,:);
    for j=6:8
        plotData(i,j)=sum(allData((i-1)*lengthTC+1:i*lengthTC,j))/lengthTC;
    end
end
disp 'plotdata'
fprintf([repmat('%f\t', 1, size(plotData, 2)) '\n'], plotData')

plotFig=figure;

plot(plotData(:,7))
title('computed nodes over alpha - pseudonodes')

saveas(plotFig,'./plot.jpg');


function data=replacenan(data)
for i=1:length(data(1,:))
    columnMax=max(data(:,i));
    for j=1:length(data(:,1))
        if isnan(data(j,i))
            data(j,i)=2*columnMax;
        end
    end
end

end

function data = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   DATA30704 = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   DATA30704 = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   data30704 = importfile('data_30-70-4.5-0.5-100', 2, 31);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/08/09 11:16:20

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', 0.0, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'EmptyValue', 0.0, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
data = [dataArray{1:end-1}];
end